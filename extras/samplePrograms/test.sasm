%include "./calls.smh"

JMPU main

%bind buffer " "

%bind hello " Hello, World"                  ; 12
%bind msg0 " THIS IS A SAMPLE SASM CODE"     ; 26
%bind msg1 " ADDING FLOATS"                  ; 13
%bind msg2 " ADDING INTS"                    ; 11
%bind msg3 " ALLOCATE AND DEALLOCATE MEMORY" ; 30
%bind msg4 " BITS OF NUMBER 30"              ; 17
%bind msg5 " TYPECASTING"                    ; 11
%bind msg6 " FIBONACCI SEQUENCE, 30 NUMBERS" ; 30
%bind msg7 " SERIES 1 TO N"                  ; 13

%bind MEMORY_SIZE 1600
%bind N 30
%bind M 256


main:

    PUSH buffer
    PUSH 10
    WRITE1

    PUSH msg0
    PUSH 26
    CALLN println

    PUSH hello      ; fetch memory address of string
    PUSH 14         ; new length
    CALLN println     ; print 13 characters

   ;SHUTS

f123:
    CALLN printNewLine
    PUSH msg1
    PUSH 15
    CALLN println

    PUSH 1.0
    PUSH 2.0
    PUSH 3.0
    ADDF
    ADDF
    CALLF print_f64
    ;SHUTS

i123:
    CALLN printNewLine
    PUSH msg2
    PUSH 13
    CALLN println

    PUSH 1
    PUSH 2
    PUSH 3
    ADDI
    ADDI
    CALLF print_i64
    ;SHUTS

allocation:
    CALLN printNewLine
    PUSH msg3
    PUSH 32
    CALLN println

    PUSH MEMORY_SIZE
    CALLF alloc
    DUP 0
    CALLF print_ptr
    CALLF free
    ;SHUTS

bits:
    CALLN printNewLine
    PUSH msg4
    PUSH 19
    CALLN println

    PUSH N
loop:
    DUP 0
    PUSH 1
    ANDB
    CALLF print_u64

    PUSH 1
    SHR

    DUP 0
    PUSH 0
    EQI
    NOT

    JMPC loop

    ;SHUTS

cast:
    CALLN printNewLine
    PUSH msg5
    PUSH 13
    CALLN println

    PUSH 3.1415
    F2I
    CALLF print_i64

    PUSH 3.1415
    F2U
    CALLF print_u64

    PUSH -1.0
    F2I
    CALLF print_i64

    PUSH -1.0
    F2U
    CALLF print_u64

    PUSH 2
    I2F
    CALLF print_f64

    PUSH -1
    I2F
    CALLF print_f64

    PUSH 48
    U2F
    CALLF print_f64

    ;SHUTS

fibo:
    CALLN printNewLine
    PUSH msg6
    PUSH 32
    CALLN println
    PUSH 0                       ; F_0
    PUSH 1                       ; F_1
    PUSH N                       ; N - the amount of iterations
loopfib:
    SWAP 2
    DUP 0
    CALLF print_i64
    DUP 1
    ADDI
    SWAP 1
    SWAP 2
    PUSH 1
    SUBI

    DUP 0
    PUSH 0
    EQI

    NOT

    JMPC loopfib
    ;SHUTS

memtest:
    CALLN printNewLine
    PUSH msg7
    PUSH 15
    CALLN println
    PUSH 0      ; i
loopmem:
   DUP 0
   DUP 0
   WRITE1

   PUSH 1
   ADDI

   DUP 0
   PUSH M
   EQI
   NOT

   JMPC loopmem

   PUSH 0
   PUSH M
   CALLF dump_memory
   SHUTS

println:
    SWAP 2                      ; AFTER A PROCEDURE CALL, TOP OF STACK IS OUR MEMORY ADDRESS
    SWAP 1                        ; SO WE MUST SHIFT THE REQUIRED NUMBER OF OPERANDS (IF ANY)
    CALLF write

printNewLine:
    PUSH buffer
    PUSH 1
    CALLF write

    RETRN
